from django.core.management.base import BaseCommand
from django.contrib.auth.models import User
from django.contrib.auth.hashers import make_password
from core.models import *
import random

class Command(BaseCommand):
    help = '–ü–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–ø–æ–ª–Ω—è–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —Ä—É—Å—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π –æ–ø—Ä–æ—Å–∞'

    def handle(self, *args, **kwargs):
        self.stdout.write("üßπ –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ...")
        for model in [
            Answer, Form, SurveyQuestion, Survey, AnswerOption, QuestionBank,
            TeacherSubject, Subject, DepartmentStaff, Student, Group, Program,
            Department, Faculty, UserProfile
        ]:
            model.objects.all().delete()
        User.objects.exclude(is_superuser=True).delete()
        self.stdout.write(self.style.SUCCESS("‚úÖ –ë–∞–∑–∞ –æ—á–∏—â–µ–Ω–∞"))

        scale = ["1", "2", "3", "4", "5"]

        def generate_unique_username(base):
            i = 1
            while User.objects.filter(username=f"{base}_{i}").exists():
                i += 1
            return f"{base}_{i}"

        def create_user(base_username, password, role, faculty=None, department=None):
            username = generate_unique_username(base_username)
            user = User.objects.create(username=username, password=make_password(password))
            UserProfile.objects.create(user=user, role=role, faculty=faculty, department=department)
            self.stdout.write(f"üë§ –°–æ–∑–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} [{role}]")
            return user

        def create_question(text, charac):
            q = QuestionBank.objects.create(text=text, characteristic=charac, type=QuestionBank.Type.CHOICE)
            for val in scale:
                AnswerOption.objects.create(question=q, text=val)
            return q

        faculty_data = {
            "–≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–π —Ñ–∞–∫—É–ª—å—Ç–µ—Ç": ["–ö–∞—Ñ–µ–¥—Ä–∞ –ø—Ä–∏–∫–ª–∞–¥–Ω–æ–π —ç–∫–æ–Ω–æ–º–∏–∫–∏", "–ö–∞—Ñ–µ–¥—Ä–∞ —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞"],
            "–ò–Ω–∂–µ–Ω–µ—Ä–Ω—ã–π —Ñ–∞–∫—É–ª—å—Ç–µ—Ç": ["–ö–∞—Ñ–µ–¥—Ä–∞ –ø—Ä–∏–∫–ª–∞–¥–Ω–æ–π –∏–Ω–∂–µ–Ω–µ—Ä–∏–∏", "–ö–∞—Ñ–µ–¥—Ä–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π"]
        }

        first_names = ["–ò–≤–∞–Ω", "–ü—ë—Ç—Ä", "–°–µ—Ä–≥–µ–π", "–ê–ª–µ–∫—Å–µ–π", "–î–º–∏—Ç—Ä–∏–π"]
        last_names = ["–ò–≤–∞–Ω–æ–≤", "–ü–µ—Ç—Ä–æ–≤", "–°–∏–¥–æ—Ä–æ–≤", "–ö—É–∑–Ω–µ—Ü–æ–≤", "–°–º–∏—Ä–Ω–æ–≤"]
        middle_name = "–ù–∏–∫–æ–ª–∞–µ–≤–∏—á"

        survey_template = None

        for f_index, (faculty_name, departments) in enumerate(faculty_data.items(), start=1):
            faculty = Faculty.objects.create(name=faculty_name)
            self.stdout.write(f"üèõ –°–æ–∑–¥–∞–Ω —Ñ–∞–∫—É–ª—å—Ç–µ—Ç: {faculty.name}")

            for d_index, department_name in enumerate(departments, start=1):
                department = Department.objects.create(name=department_name, faculty=faculty)
                self.stdout.write(f"  üè¢ –ö–∞—Ñ–µ–¥—Ä–∞: {department.name}")

                for p_num in range(1, 3):
                    program_name = f"–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ {faculty.name.split()[0]}-{d_index}{p_num}"
                    program_code = f"{f_index}{d_index}{p_num}"
                    program = Program.objects.create(name=program_name, code=program_code, department=department)

                    for g_num in range(1, 3):
                        admission_year = 2020 + g_num
                        group = Group.objects.create(program=program, admission_year=admission_year)
                        self.stdout.write(f"    üë• –ì—Ä—É–ø–ø–∞: {admission_year}")

                        for s in range(3):
                            fname = random.choice(first_names)
                            lname = random.choice(last_names)
                            base_username = f"{fname.lower()}_{lname.lower()}"
                            username = generate_unique_username(base_username)
                            full_name = f"{lname} {fname} {middle_name}"
                            user = User.objects.create(username=username, password=make_password("123"))
                            UserProfile.objects.create(user=user, role=UserProfile.Role.STUDENT)
                            Student.objects.create(full_name=full_name, number=f"S{username}", year=3, user=user, group=group)

                        for t in range(1, 3):
                            fname = random.choice(first_names)
                            lname = random.choice(last_names)
                            base_username = f"teacher_{lname.lower()}"
                            username = generate_unique_username(base_username)
                            full_name = f"{lname} {fname} {middle_name}"
                            user = User.objects.create(username=username, password=make_password("123"))
                            UserProfile.objects.create(user=user, role=UserProfile.Role.TEACHER)
                            teacher = DepartmentStaff.objects.create(
                                full_name=full_name,
                                position="–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å",
                                degree="–ö–∞–Ω–¥–∏–¥–∞—Ç –Ω–∞—É–∫",
                                user=user,
                                department=department
                            )

                            for subj_index in range(1, 3):
                                subj = Subject.objects.create(
                                    name=f"–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞ {lname} {subj_index}",
                                    index=f"SUBJ{f_index}{d_index}{t}{subj_index}"
                                )
                                ts = TeacherSubject.objects.create(
                                    teacher=teacher,
                                    subject=subj,
                                    course=3,
                                    semester=2,
                                    group=group
                                )
                                if not survey_template:
                                    survey_template = Survey.objects.create(
                                        name="–ê–Ω–∫–µ—Ç–∞ –æ—Ü–µ–Ω–∫–∏ –∫—É—Ä—Å–∞",
                                        year=2025,
                                        teacher_subject=ts
                                    )

        self.stdout.write("üß† –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å—ã –≤ —à–∞–±–ª–æ–Ω –æ–ø—Ä–æ—Å–∞...")

        def add_q(text, charac):
            q = create_question(text, charac)
            SurveyQuestion.objects.create(survey=survey_template, question=q)
            self.stdout.write(f"   ‚úÖ {text}")

        add_q("–û—Ü–µ–Ω–∏—Ç–µ –≤–∞—à–µ –æ–±—â–µ–µ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏–µ –æ—Ç –∫—É—Ä—Å–∞.", "–û–±—â–µ–µ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏–µ")
        add_q("–û—Ü–µ–Ω–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –≤–∞–º–∏ –∑–Ω–∞–Ω–∏–π –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —É—á–µ–±–Ω–æ–π –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã.", "–û–±—â–µ–µ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏–µ")
        add_q("–û—Ü–µ–Ω–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –ª–µ–∫—Ü–∏–æ–Ω–Ω–æ–≥–æ –∏ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞.", "–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∫—É—Ä—Å–∞")
        add_q("–û—Ü–µ–Ω–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –ø–æ–¥–∞—á–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–º.", "–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∫—É—Ä—Å–∞")
        add_q("–û—Ü–µ–Ω–∏—Ç–µ –æ–±—â–µ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —É—á–µ–±–Ω–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –≤ –∫—É—Ä—Å–µ.", "–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∫—É—Ä—Å–∞")
        add_q("–ù–∞—Å–∫–æ–ª—å–∫–æ –ø–æ–Ω—è—Ç–Ω–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –æ–±—ä—è—Å–Ω—è–µ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª?", "–ü—Ä–µ–ø–æ–¥–∞–≤–∞–Ω–∏–µ")
        add_q("–ù–∞—Å–∫–æ–ª—å–∫–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –∞–¥–∞–ø—Ç–∏—Ä—É–µ—Ç —Å–ª–æ–∂–Ω—ã–µ —Ç–µ–º—ã –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–∞–º–∏?", "–ü—Ä–µ–ø–æ–¥–∞–≤–∞–Ω–∏–µ")
        add_q("–ù–∞—Å–∫–æ–ª—å–∫–æ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω–∞ –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º–∞—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–º?", "–ü—Ä–µ–ø–æ–¥–∞–≤–∞–Ω–∏–µ")
        add_q("–ù–∞—Å–∫–æ–ª—å–∫–æ —Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ –∏ –æ–±—ä–µ–∫—Ç–∏–≤–Ω–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –æ—Ü–µ–Ω–∏–≤–∞–µ—Ç –∑–Ω–∞–Ω–∏—è –∏ —É—Å–∏–ª–∏—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤?", "–ü—Ä–µ–ø–æ–¥–∞–≤–∞–Ω–∏–µ")
        add_q("–ù–∞—Å–∫–æ–ª—å–∫–æ —É–¥–æ–±–Ω—ã –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –¥–ª—è –æ–±—â–µ–Ω–∏—è –∏ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –∑–∞–Ω—è—Ç–∏–π?", "–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –∏ –ø—Ä–µ–¥–º–µ—Ç")
        add_q("–ù–∞—Å–∫–æ–ª—å–∫–æ —Ç–µ–º–ø –ø–æ–¥–∞—á–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –≤–∞—à–∏–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º —É—Å–≤–æ–µ–Ω–∏—è?", "–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –∏ –ø—Ä–µ–¥–º–µ—Ç")
        add_q("–ù–∞—Å–∫–æ–ª—å–∫–æ —É—á–µ–±–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –∏ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã?", "–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –∏ –ø—Ä–µ–¥–º–µ—Ç")
        add_q("–ù–∞—Å–∫–æ–ª—å–∫–æ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞ –ø–æ–ª–µ–∑–Ω–∞ –¥–ª—è –≤–∞—à–µ–π –±—É–¥—É—â–µ–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏?", "–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –∏ –ø—Ä–µ–¥–º–µ—Ç")

        f1 = Faculty.objects.first()
        d1 = Department.objects.filter(faculty=f1).first()
        self.stdout.write("üëÆ –î–æ–±–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:")
        create_user("admin_office", "123", UserProfile.Role.ADMIN)
        create_user("faculty_admin", "123", UserProfile.Role.FACULTY_ADMIN, faculty=f1)
        create_user("dept_admin", "123", UserProfile.Role.DEPARTMENT_ADMIN, department=d1)

        self.stdout.write(self.style.SUCCESS("‚úÖ –ü–æ–ª–Ω–æ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ."))