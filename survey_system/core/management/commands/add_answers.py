from django.core.management.base import BaseCommand
from core.models import StudentData, Survey, Form, Student, SurveyQuestion, Answer
import random

class Command(BaseCommand):
    help = 'Seeds answers for a selected survey'

    def add_arguments(self, parser):
        parser.add_argument('--survey-id', type=int, help='ID –æ–ø—Ä–æ—Å–∞')

    def handle(self, *args, **options):
        survey_id = options.get('survey_id')

        if not survey_id:
            surveys = Survey.objects.select_related('teacher_subject__group')
            self.stdout.write(self.style.NOTICE("üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –æ–ø—Ä–æ—Å—ã:"))
            for s in surveys:
                group = s.teacher_subject.group if s.teacher_subject else None
                group_info = f"{group.program.name} ({group.admission_year})" if group else "‚Äî"
                self.stdout.write(f"  ID={s.id}: {s.name} ‚Äî {s.year} | –ì—Ä—É–ø–ø–∞: {group_info}")

            survey_id = input("\n–í–≤–µ–¥–∏—Ç–µ ID –æ–ø—Ä–æ—Å–∞: ").strip()

        try:
            survey = Survey.objects.select_related('teacher_subject__group').get(id=survey_id)
        except Survey.DoesNotExist:
            self.stdout.write(self.style.ERROR("‚ùå –û–ø—Ä–æ—Å —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω"))
            return

        if not survey.teacher_subject or not survey.teacher_subject.group:
            self.stdout.write(self.style.ERROR("‚ùå –£ –æ–ø—Ä–æ—Å–∞ –Ω–µ—Ç —Å–≤—è–∑–∞–Ω–Ω–æ–≥–æ teacher_subject –∏–ª–∏ –≥—Ä—É–ø–ø—ã"))
            return

        students = survey.teacher_subject.group.student_set.all()
        questions = SurveyQuestion.objects.filter(survey=survey).select_related('question')

        if not students.exists():
            self.stdout.write(self.style.ERROR("‚ùå –í –≥—Ä—É–ø–ø–µ –Ω–µ—Ç —Å—Ç—É–¥–µ–Ω—Ç–æ–≤"))
            return

        created_count = 0

        for student in students:
            form, created = Form.objects.get_or_create(
                student=student,
                survey=survey,
                defaults={'name': f"–û—Ç–≤–µ—Ç {student.full_name}"}
            )

            if not created:
                self.stdout.write(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ: —É {student.full_name} —É–∂–µ –µ—Å—Ç—å —Ñ–æ—Ä–º–∞")
                continue

            for sq in questions:
                Answer.objects.create(
                    form=form,
                    question=sq.question,
                    value=str(random.randint(1, 5))
                )
            try:
                StudentData.objects.create(
                    student=student,
                    avg_score=random.uniform(3.0, 5.0),
                    attendance_ratio=random.uniform(0.6, 1.0)
                )
            except Exception:
                created_count += 1

        self.stdout.write(self.style.SUCCESS(f"\n‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã –æ—Ç–≤–µ—Ç—ã –¥–ª—è {created_count} —Å—Ç—É–¥–µ–Ω—Ç–æ–≤"))
